---
title: Quick Start
subtitle:
---

Svelte table is intutive and extremely easy to use.

The core function is `createTable`, where you pass the data you want to display along with the column models.

### Defining your data

In its simplest form, the table takes two parameters. The first is the data. Svelte Table utilizes the powerful runes provided by Svelte 5 to create a reactive table state.

You achieve this you need to define your data using the `$state` rune.

```typescript
const data = [
  { id: 1, title: "Post1", body: "Body of the post1", author: "Alice" },
  { id: 2, title: "Post2", body: "Body of the post2", author: "Bob" },
  { id: 3, title: "Post3", body: "Body of the post3", author: "Charlie" },
];
```

### Defining the columns

Next, define the column model, again using the $state rune:

```typescript
const columns = [
	{ id: 'id', accessorKey: 'id', label: 'ID' },
	{ id: 'title', accessorKey: 'title', label: 'Title' },
	{ id: 'body', accessorKey: 'body', label: 'Body' },
	{ id: 'author', accessorKey: 'author', label: 'Auhor' }
];
```

Each column needs an `id` to uniquely identify it, and optionally, an `accessorKey`. The `accessorKey` is used to access the corresponding property from each data item and retrieve its value. If no `accessorKey` is provided, the column will use the key specified in the `id` to fetch the data.

- For the column with `accessorKey: 'id'`, the values read will be `1`, `2`, and `3`.
- For the column with `accessorKey: 'title'`, the values read will be `"Post1"`, `"Post2"`, and `"Post3"`.

You can customize the way the table is rendered however you'd like. The table is highly flexible, allowing you to use custom rendering logic or components for each cell or row. For example, you can render snippets, apply conditional formatting, or even use Svelte components within the table. This gives you complete control over the structure and presentation of your table data.

### Create the table

Once you’ve defined the data and columns, all that’s left is to call the `createTable` function to generate your table:

```typescript
const table = createTable(data, columns);
```

That's it! Your table is now ready to go. It's entirely up to you how you render it. Here’s a basic structure for rendering:

```svelte
<table>
	<thead>
		<tr>
			{#each table.headers as header}
				<th>{header}</th>
			{/each}
		</tr>
	</thead>
	<tbody>
		{#each table.rows as row}
			<tr>
				{#each row.cells as cell}
					<td>{cell.value}</td>
				{/each}
			</tr>
		{/each}
	</tbody>
</table>
```

Here’s the expected output. You can style it however you'd like:

<table>
	<thead>
		<tr>
			<th>ID</th>
			<th>Title</th>
			<th>Body</th>
			<th>Author</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>1</td>
			<td>Post1</td>
			<td>Body of the post1</td>
			<td>Alice</td>
		</tr>
		<tr>
			<td>2</td>
			<td>Post2</td>
			<td>Body of the post2</td>
			<td>Bob</td>
		</tr>
		<tr>
			<td>3</td>
			<td>Post3</td>
			<td>Body of the post3</td>
			<td>Charlie</td>
		</tr>
	</tbody>
</table>
