---
title: Columns
subtitle: Learn everything about columns
---

### Basic Usage

In Svelte Table, columns define the structure of your table and determine the data displayed in each column. Each column requires an `id`, which uniquely identifies it, and optionally an `accessorKey`, which specifies the property of the data to access and display for that column.

```javascript
const columns = $state([
  { id: 'id', accessorKey: 'id', label: 'ID' },
  { id: 'title', accessorKey: 'title', label: 'Title' },
  { id: 'author', accessorKey: 'author', label: 'Author' },
]);
```

In this example:

- The `id` is used to uniquely identify the column.
- The `accessorKey` tells Svelte Table which property from each row of data to display.

By default, Svelte Table renders each cell's value based on the `accessorKey`, which retrieves the corresponding data property. However, you might want to customize how a cell’s value is displayed. The rendering of each cell is entirely up to you.

You have full control over how each column’s data is rendered. Whether you need custom formatting, conditional rendering, or the inclusion of custom components, it's all possible.

---

### Example: Custom Cell Formatting

Let’s say you want to modify how a cell’s value appears—for instance, wrapping it in dashes or applying other visual modifications.

Here’s an example of how you could achieve that:

```javascript
const formatter = (cell) => {
  return '-' + {cell.value} + '-'; // Apply custom formatting to cell value
};
```

You can then use your custom formatting directly in the table rendering:

```svelte
<tbody>
  {#each table.rows as row}
    <tr>
      {#each row.cells as cell}
        <td>{formatter(cell)}</td> <!-- Custom formatted value -->
      {/each}
    </tr>
  {/each}
</tbody>
```

It’s up to you how you want to format the value. You could apply string manipulations, use conditional logic, or even render HTML or Svelte components.

---

### Example: Conditional Rendering Based on Column `id`

Suppose you want to apply custom formatting only for a specific column, such as the “age” column. You can use Svelte's `{#if}` block to check the `cell.id` and apply formatting conditionally.

```svelte
<tbody>
  {#each table.rows as row}
    <tr>
      {#each row.cells as cell}
        {#if cell.id === 'age'}
          <td>{@html formatter(cell)}</td> <!-- Apply custom formatting for 'age' column -->
        {:else}
          <td>{cell.value}</td> <!-- Default rendering for other columns -->
        {/if}
      {/each}
    </tr>
  {/each}
</tbody>
```

### Explanation:

- **Conditional Check**: We check if `cell.id === 'age'`. This ensures that custom formatting is applied only to cells in the “age” column.
- **Custom Formatter**: If the condition is true (i.e., the column is "age"), we apply the `formatter(cell)` function to format the value (e.g., adding styles, modifying the content, etc.).
- **Default Rendering**: For all other columns, the value is simply rendered using `{cell.value}` without additional formatting.

---

### Example: Using `{#snippet}` for Custom Cell Content

To keep your table rendering clean and reduce HTML clutter, you can extract the rendering logic into a reusable `{#snippet}` block. This is especially helpful when you have multiple conditions for different columns.

#### Define the Snippet

```svelte
{#snippet ActionButton(cell: Cell<Post>)}
  <button onclick={() => onDeletePost(cell.item)}>Delete post</button>
{/snippet}
```

#### Use the Snippet in the Table

You can now reference the snippet in the table's body where you need to apply custom rendering.

```svelte
<tbody>
  {#each table.rows as row}
    <tr>
      {#each row.cells as cell}
        {#if cell.id === 'action'}
          <td>
            {@render ActionButton(cell)} <!-- Render a custom snippet in the 'action' column -->
          </td>
        {:else}
          <td>{cell.value}</td> <!-- Default rendering for other columns -->
        {/if}
      {/each}
    </tr>
  {/each}
</tbody>
```

### Explanation:

- **Reusable Snippet**: `{#snippet}` defines a reusable block of code that you can render with `{@render}`.
- **Custom Rendering**: The `ActionButton` snippet handles the rendering logic for the "action" column, while other columns default to rendering their cell values.

---

### Example: Rendering a Custom Svelte Component in a Table Cell

You can also render custom Svelte components in a table cell. Here’s an example where a custom `ActionButton` component is rendered in the table's "action" column:

#### `ActionButton.svelte`

```svelte
<script>
  const { post }: { post: Post } = $props();
</script>

<button onclick={() => onDeletePost(post)}>Delete post</button>
```

#### Table Rendering

```svelte
<tbody>
  {#each table.rows as row}
    <tr>
      {#each row.cells as cell}
        {#if cell.id === 'action'}
          <td>
            <ActionButton post={cell.item} /> <!-- Render a custom component in the 'action' column -->
          </td>
        {:else}
          <td>{cell.value}</td> <!-- Default rendering for other columns -->
        {/if}
      {/each}
    </tr>
  {/each}
</tbody>
```

### Explanation:

- **Custom Component**: `ActionButton.svelte` is used to render a custom button inside the table cell.
- **Passing Data**: The `post` data is passed as a prop to the `ActionButton` component from the table cell’s `item`.

---

### Example: Extracting Conditional Logic into a Snippet

When you have multiple conditions to handle for different columns, you can define and reuse a snippet to avoid cluttering the HTML. This improves code organization and readability.

#### Define the Snippet

```svelte
{#snippet Cell(cell: Cell<User>)}
  {#if cell.id === 'email'}
    <a href="mailto:{cell.value}">{cell.value}</a> <!-- Render email as a link -->
  {:else if cell.id === 'username'}
    <strong>{cell.value}</strong> <!-- Render username in bold -->
  {:else if cell.id === 'action'}
    {@render ActionButton(cell)} <!-- Render action button as a snippet -->
  {:else if cell.id === 'category'}
    <Chip label={cell.value}/> <!-- Render chip component -->
  {:else}
    {cell.value} <!-- Default rendering for other columns -->
  {/if}
{/snippet}
```

#### Use the Snippet in the Table

Once you've defined the snippet, you can reference it in the table rendering to keep the code clean.

```svelte
<tbody>
  {#each table.rows as row}
    <tr>
      {#each row.cells as cell}
        <td>{@render Cell(cell)}</td> <!-- Use the snippet to handle conditional rendering -->
      {/each}
    </tr>
  {/each}
</tbody>
```

### Key Takeaways

- **Conditional Rendering**: Use Svelte's `{#if ...}{:else}` block to conditionally apply custom formatting to specific columns.
- **Column-Specific Logic**: You can target columns by checking properties like `cell.id` to apply column-specific formatting.
- **Default Rendering**: For columns that don’t require custom formatting, simply use the default `{cell.value}` rendering.
- **Reusable Snippets**: Extract conditional rendering logic into `{#snippet}` blocks to make your table template more readable and maintainable.
- **Custom Components**: You can render custom Svelte components within the table by passing data to them as props.